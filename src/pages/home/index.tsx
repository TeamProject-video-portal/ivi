import Head from "next/head";
import { Inter } from "next/font/google";
import Banner from "@/components/Banner";
import { useTranslation } from "next-export-i18n";
import { FC, useEffect, useState } from "react";
import SimpleSlider from "@/components/Sliders/SimpleSlider";
import main_banner from "@/data/Main_banner.json";
import { ISimpleMovie, MoviesForSlidersOnHomePageT } from "@/types/types";
import { connect, useDispatch, useSelector } from "react-redux";
import { wrapper } from "@/Redux/store";
import { DATA_BANNER } from "@/Redux/banner/action-types";
import { selectBanner } from "@/Redux/banner/selectors";
import { RootState } from "@/Redux/RootState";
import SliderContinueBrowsing from "@/components/Sliders/SliderContinueBrowsing";
import { Loader } from "@/components/Loader";
import styles from "./Home.module.scss";
import { getDataBanner } from "@/Redux/banner/actions";
import { getDataHomePage } from "@/Redux/homePage/actions";
import SliderTopTen from "@/components/Sliders/SliderTopTen";
import { selectHomePage } from "@/Redux/homePage/selectors";
import { selectBrowsingMovie } from "@/Redux/continue_browsing/selectors";
import { BrowsingMovie } from "@/Redux/continue_browsing/reducer";
import { NextPage } from "next";

const inter = Inter({ subsets: ["latin"] });

const Home: NextPage = ({ movies, banner }: any) => {
  const { t } = useTranslation();
  const ContinueBrowingmovies: BrowsingMovie[] =
    useSelector(selectBrowsingMovie);

  const [isLoading, setIsLoading] = useState(false);
  return (
    <div className={styles.wrapper}>
      <Head>
        <title>IVI</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta httpEquiv="Permissions-Policy" content="interest-cohort=()" />
      </Head>

      <Banner movies={banner} />
      <SliderContinueBrowsing
        title={t("sliders_title.continue_browsing")}
        type={"summary"}
        movies={ContinueBrowingmovies}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />
      <SliderTopTen />
      {isLoading && <Loader type="loading_page" />}
      <SimpleSlider
        title={t("sliders_title.best_films")}
        films={movies.bestFilmsSet as ISimpleMovie[]}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />

      <SimpleSlider
        title={t("sliders_title.family_comedies")}
        films={movies.familyFriendlyComediesSet as ISimpleMovie[]}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />

      <SimpleSlider
        title={t("sliders_title.best_fantasy_films")}
        films={movies.bestFantasyFilmsSet as ISimpleMovie[]}
        isLoading={isLoading}
        setIsLoading={setIsLoading}
      />
    </div>
  );
};
export const getStaticProps = wrapper.getServerSideProps(
  (store) => async (context) => {
    await store.dispatch(getDataHomePage());
    await store.dispatch(getDataBanner());
    await new Promise((resolve) => setTimeout(resolve, 1000));
    const movies = await store.getState().homePage;
    const banner = await store.getState().banner.data;
    return { props: { movies, banner } };
  }
);
export default Home;
